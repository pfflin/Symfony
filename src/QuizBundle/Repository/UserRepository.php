<?php

namespace QuizBundle\Repository;


use Doctrine\DBAL\Connection;
use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Mapping;
use Doctrine\ORM\Query;
use PDO;
use QuizBundle\Entity\User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    public function __construct(EntityManagerInterface $em)
    {
        parent::__construct($em, new Mapping\ClassMetadata(User::class));

    }

    public function getAllUsers()
    {
        $qb = $this->createQueryBuilder('u');
        $qb->select(User::class)
            ->from('User', 'u')
            ->orderBy('u.name', 'ASC');
        return $qb->getQuery()
            ->getResult();
    }
    public function getAll(){
       return $this->findAll();
    }
    public function saveUser(User $user){
       $this->_em->persist($user);
        $this->_em->flush();
    }
    public function getUsersOrderedByTotalRank(){
       return $this->findBy(array(),array('totalRank' => 'DESC'));
    }
    public function persistUser(User $user){
        $this->_em->persist($user);
    }
    public function flushAll(){
        $this->_em->flush();
    }
    public function getLiked(User $user){
        $query = $this->_em->createQueryBuilder();
        $query->select('l.id');
        $query->from('QuizBundle:User','u');
        $query->innerJoin('u.likes','l');
        $query->where("u.id = :authorId");
        $query->setParameter("authorId",$user->getId());
        return $query->getQuery()->getResult();
    }
    public function getCommented(User $user){
        $query = $this->_em->createQueryBuilder();
        $query->select('c.questionId');
        $query->from('QuizBundle:User','u');
        $query->innerJoin('u.comments','c');
        $query->where("u.id = :authorId");
        $query->setParameter("authorId",$user->getId());
        return $query->getQuery()->getResult();
    }
    public function getLikedQuestions(User $user)
    {
        $query = $this->_em->createQueryBuilder();
        $query->select('l.question', 'l.correct', 'l.id');
        $query->from('QuizBundle:User', 'u');
        $query->innerJoin('u.likes', 'l');
        $query->where("u.id = :authorId");
        $query->setParameter("authorId", $user->getId());
        return $query->getQuery()->getResult(Query::HYDRATE_OBJECT);

    }
    public function getCommentedQuestions(User $user){
        $query = $this->_em->createQueryBuilder();
        $query->select('q.question','q.correct','q.id');
        $query->from('QuizBundle:User','u');
        $query->innerJoin('u.comments','c');
        $query->innerJoin('c.question', 'q');
        $query->where("u.id = :authorId");
        $query->setParameter("authorId",$user->getId());
        return $query->getQuery()->getResult();
    }
}
